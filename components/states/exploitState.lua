ExploitState = BaseState:extend()

function ExploitState:new()
    self.remainingTime = 1 / Constants.COMMON_ACTION_FPS * 3
    self.isActionPerformed = false
    return self
end

---@param subject GameObject
function ExploitState:update(subject, dt)
    self.remainingTime = self.remainingTime - dt
    if self.remainingTime <= 0 then
        return NullState()
    end

    self:checkAction(subject)

    subject.animComp:setCurrentAnim("attack-" .. subject.positionComp.lastDirection)
    return nil
end

---@param subject GameObject
function ExploitState:checkAction(subject)
    if self.isActionPerformed then
        return
    end

    local isMousePressed, mouseX, mouseY, worldRect = MyLocator:checkMousePress(1)
    if self.remainingTime < 0.1 then
        self.isActionPerformed = true
        local worldPlayerCenter = subject.positionComp.displayRect:getCenter()
        local actionDirection = CommonHelper.get4dDirectionFromDirection(worldRect.x, worldRect.y, worldPlayerCenter.x,
            worldPlayerCenter.y)
        -- local worldPlayerTile = worldPlayerCenter.toWorldTile()
        local performActionPos = worldPlayerCenter +
            Vector2(actionDirection.x * Constants.ACTION_DISTANCE, actionDirection.y * Constants.ACTION_DISTANCE)
        local dmgObj = GameObjectFactory.getDmgObj(performActionPos.x, performActionPos.y)
        MyLocator.gameObjectManager:addGameObject(dmgObj)
    end
    -- if isMousePressed then
    --     local worldPlayerCenter = subject.positionComp.displayRect:getCenter()
    --     local worldPlayerTile = worldPlayerCenter.toWorldTile()
    --     local mouseTile = worldRect.toWorldTile()
    --     local dx = math.abs(worldPlayerTile.x - mouseTile.x)
    --     local dy = math.abs(worldPlayerTile.y - mouseTile.y)
    --     if dx <= 1 and dy <= 1 then
    --         local dmgObj = GameObjectFactory.getDmgObj(worldRect.x, worldRect.y)
    --         MyLocator.gameObjectManager:addGameObject(dmgObj)
    --     end
    -- end
end

return ExploitState
